#!/usr/bin/env ruby
# frozen_string_literal: true

# Examples:
#   gal -g rails
#   gal -g ruby -d -l
#   gal spec/models/user_spec.rb -b -c

require 'amazing_print'
require 'fileutils'
require 'memoist'
require 'slop'

module Gal
  def self.print_options(options)
    puts(
      options.to_s.dup.
        sub(%r{/Users/david/workspace/dotfiles/bin/}, '').
        sub(%r{gal \[options\]}, 'gal [spec file(s) to run] [options]'),
    )
  end
end

opts =
  Slop.parse do |o|
    o.symbol('-g', '--guardfile', 'guardfile flag [spec (default) | ruby | rails]', default: :spec)
    o.bool('-b', '--backtrace', 'print backtrace when errors occur or tests fail')
    o.bool('-s', '--skip-spring', 'do not use spring')
    o.bool('-c', '--force-coverage-detail', 'print code coverage info even if 100% covered')
    o.bool('-f', '--force-guardfile-template-copy', 'force copying guardfile to personal directory')
    o.bool('-d', '--debug-guard', 'enable guard debug logging')
    o.bool('-l', '--debug-listen', 'enable listen debug logging')
    o.bool('-v', '--headful-chrome', 'run tests with headful chrome browser')
    o.on('-h', '--help', 'view this help info') do
      Gal.print_options(o)
      exit
    end
  end

class Runner
  extend Memoist

  GUARDFILE_TEMPLATES = %w[run_rails run_ruby].freeze

  def initialize(opts)
    @opts = opts
  end

  def run
    colored_command = "#{env_vars.map { |k, v| %(#{k}="#{v}") }.join(' ')} #{command}".blue
    puts("Running #{colored_command}")
    system(env_vars, command)
  end

  private

  memoize \
  def command
    command = +"guard -G #{guardfile} --no-bundler-warning"

    if @opts.debug_guard?
      command << ' --debug'
    end

    command
  end

  memoize \
  def env_vars
    {
      'RUBYGEMS_GEMDEPS' => '', # this suppresses a warning from guard
      'RSPEC_BACKTRACE' => @opts.backtrace? ? '1' : nil,
      'HEADFUL_CHROME' => @opts.headful_chrome? ? '1' : nil,
      'LISTEN_GEM_DEBUGGING' => @opts.debug_listen? ? 'debug' : nil,
      'TARGET_SPEC_FILES' => @opts.arguments.empty? ? nil : @opts.arguments.join(' '),
      'DISABLE_SPRING' => ENV.fetch('DISABLE_SPRING', @opts.skip_spring? ? '1' : nil),
      'SIMPLECOV_FORCE_DETAILS' => @opts.force_coverage_detail? ? '1' : nil,
    }.compact
  end

  memoize \
  def guardfile
    if GUARDFILE_TEMPLATES.include?(guardfile_filename)
      if !File.exist?(working_directory_guardfile_path) || @opts.force_guardfile_template_copy?
        copy_dotfile_to_working_directory
      end
      working_directory_guardfile_path
    else
      dotfiles_absolute_path
    end
  end

  memoize \
  def dotfiles_absolute_path
    "/Users/david/workspace/dotfiles/guardfiles/#{guardfile_filename}.rb"
  end

  memoize \
  def guardfile_filename
    case (guardfile_flag = @opts[:guardfile])
    when :spec then 'run_spec'
    when :ruby then 'run_ruby'
    when :rails then 'run_rails'
    else raise("Unexpected guardfile flag '#{guardfile_flag}'.")
    end
  end

  def copy_dotfile_to_working_directory
    FileUtils.mkdir_p(working_directory_guardfile_directory)
    FileUtils.cp(dotfiles_absolute_path, working_directory_guardfile_directory)
  end

  def working_directory_guardfile_path
    "#{working_directory_guardfile_directory}/#{guardfile_filename}.rb"
  end

  def working_directory_guardfile_directory
    "#{working_directory}/personal/guardfiles"
  end

  memoize \
  def working_directory
    ENV.fetch('PWD')
  end
end

if opts.arguments.empty? && opts.used_options.empty?
  Gal.print_options(opts.options)
else
  Runner.new(opts).run
end
